{"version":3,"file":"ScopedLitElement.js","sourceRoot":"","sources":["../src/ScopedLitElement.ts"],"names":[],"mappings":"AAAA,OAAO,EAAa,UAAU,EAAY,MAAM,aAAa,CAAC;AAI9D,MAAM,OAAO,gBAAiB,SAAQ,UAAU;IAG9C,MAAM,KAAK,cAAc;QACvB,OAAO,EAAE,CAAC;IACZ,CAAC;IAED,gBAAgB;QACd,OAAO,IAAI,CAAC,YAAY,CAAC;YACvB,IAAI,EAAE,MAAM;YACZ,cAAc,EAAE,IAAI,qBAAqB,EAAE;SACrC,CAAC,CAAC;IACZ,CAAC;IAED,iBAAiB;QACf,KAAK,CAAC,iBAAiB,EAAE,CAAC;QAE1B,MAAM,QAAQ,GAAI,IAAI,CAAC,WAAuC;aAC3D,cAAc,CAAC;QAElB,KAAK,MAAM,GAAG,IAAI,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,EAAE;YACvC,IAAI,CAAC,UAAU,CAAC,cAAc,CAAC,MAAM,CAAC,GAAG,EAAE,QAAQ,CAAC,GAAG,CAAC,CAAC,CAAC;SAC3D;IACH,CAAC;CACF","sourcesContent":["import { html, css, LitElement, property } from \"lit-element\";\n\nexport type Dictionary<T> = { [key: string]: T };\n\nexport class ScopedLitElement extends LitElement {\n  shadowRoot!: ShadowRoot & { customElements: CustomElementRegistry };\n\n  static get scopedElements(): Dictionary<typeof HTMLElement> {\n    return {};\n  }\n\n  createRenderRoot() {\n    return this.attachShadow({\n      mode: \"open\",\n      customElements: new CustomElementRegistry(),\n    } as any);\n  }\n\n  connectedCallback() {\n    super.connectedCallback();\n\n    const elements = (this.constructor as typeof ScopedLitElement)\n      .scopedElements;\n\n    for (const tag of Object.keys(elements)) {\n      this.shadowRoot.customElements.define(tag, elements[tag]);\n    }\n  }\n}\n"]}